-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.a_des_etats
(
    numero_dossier integer NOT NULL,
    id_jumeau_numerique integer NOT NULL,
    CONSTRAINT a_des_etats_pkey PRIMARY KEY (numero_dossier, id_jumeau_numerique)
);

CREATE TABLE IF NOT EXISTS public."a_la_spécialite"
(
    id_praticien integer NOT NULL,
    id_specialites integer NOT NULL,
    CONSTRAINT "a_la_spécialite_pkey" PRIMARY KEY (id_praticien, id_specialites)
);

CREATE TABLE IF NOT EXISTS public.achete
(
    numero_dossier integer NOT NULL,
    id_produits_bien_etre integer NOT NULL,
    CONSTRAINT achete_pkey PRIMARY KEY (numero_dossier, id_produits_bien_etre)
);

CREATE TABLE IF NOT EXISTS public.alimente
(
    numero_dossier integer NOT NULL,
    id_parcours_personnalises integer NOT NULL,
    id_resultat_parcours integer NOT NULL,
    id_analyse_ia_ integer NOT NULL,
    modele_ia character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT alimente_pkey PRIMARY KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours, id_analyse_ia_)
);

CREATE TABLE IF NOT EXISTS public.analyse_ia_
(
    id_analyse_ia_ serial NOT NULL,
    version_modele numeric(1, 1),
    statut_validation character varying(50) COLLATE pg_catalog."default",
    resultats character varying(2000) COLLATE pg_catalog."default",
    date_analyse timestamp without time zone,
    type_analyse_ character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT analyse_ia__pkey PRIMARY KEY (id_analyse_ia_)
);

CREATE TABLE IF NOT EXISTS public.animer
(
    id_praticien integer NOT NULL,
    id_conferences integer NOT NULL,
    CONSTRAINT animer_pkey PRIMARY KEY (id_praticien, id_conferences)
);

CREATE TABLE IF NOT EXISTS public.ateliers
(
    id_ateliers serial NOT NULL,
    nom_activite character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description_activite character varying(1000) COLLATE pg_catalog."default",
    thematique character varying(100) COLLATE pg_catalog."default",
    capacite_max integer,
    tarif numeric(15, 2),
    date_debut timestamp without time zone NOT NULL,
    date_fin timestamp without time zone NOT NULL,
    url_visio character varying(255) COLLATE pg_catalog."default",
    adresse_presentiel character varying(255) COLLATE pg_catalog."default",
    est_gratuit boolean,
    est_enregistre boolean,
    statut_activite character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT ateliers_pkey PRIMARY KEY (id_ateliers)
);

CREATE TABLE IF NOT EXISTS public.avis
(
    id_praticien integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_avis serial NOT NULL,
    note serial NOT NULL,
    commentaire character varying(300) COLLATE pg_catalog."default",
    date_avis time without time zone,
    CONSTRAINT avis_pkey PRIMARY KEY (id_praticien, numero_dossier, id_avis)
);

CREATE TABLE IF NOT EXISTS public.bilan_suivi_patient
(
    numero_dossier integer NOT NULL,
    id_bilan_suivi_patient serial NOT NULL,
    date_bilan date,
    rapport_ia character varying(1000) COLLATE pg_catalog."default",
    retours character varying(50) COLLATE pg_catalog."default",
    courbes_suivi_progres real,
    kpi_quantitatifs character varying(50) COLLATE pg_catalog."default",
    date_debut_periode_ timestamp without time zone,
    date_fin_periode_ timestamp without time zone,
    est_exportable_ boolean,
    CONSTRAINT bilan_suivi_patient_pkey PRIMARY KEY (numero_dossier, id_bilan_suivi_patient)
);

CREATE TABLE IF NOT EXISTS public.communaute
(
    id_communaute serial NOT NULL,
    nom_groupe character varying(50) COLLATE pg_catalog."default",
    description_groupe character varying(1000) COLLATE pg_catalog."default",
    date_creation date,
    est_anonyme boolean,
    CONSTRAINT communaute_pkey PRIMARY KEY (id_communaute),
    CONSTRAINT communaute_nom_groupe_key UNIQUE (nom_groupe)
);

CREATE TABLE IF NOT EXISTS public.conferences
(
    id_conferences serial NOT NULL,
    capacite_max integer,
    statut_conference character varying(50) COLLATE pg_catalog."default",
    titre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    resume_conference character varying(1000) COLLATE pg_catalog."default",
    "thématique" character varying(100) COLLATE pg_catalog."default",
    duree_prevu_minutes integer,
    date_heure_debut timestamp without time zone,
    date_heure_fin timestamp without time zone,
    url_visio character varying(255) COLLATE pg_catalog."default",
    tarif numeric(15, 2),
    CONSTRAINT conferences_pkey PRIMARY KEY (id_conferences)
);

CREATE TABLE IF NOT EXISTS public.consulte
(
    numero_dossier integer NOT NULL,
    id_contenus_inspirants integer NOT NULL,
    CONSTRAINT consulte_pkey PRIMARY KEY (numero_dossier, id_contenus_inspirants)
);

CREATE TABLE IF NOT EXISTS public.consulte_intervient
(
    id_praticien integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_parcours_personnalises integer NOT NULL,
    CONSTRAINT consulte_intervient_pkey PRIMARY KEY (id_praticien, numero_dossier, id_parcours_personnalises)
);

CREATE TABLE IF NOT EXISTS public.contenus_inspirants
(
    id_contenus_inspirants serial NOT NULL,
    titre character varying(50) COLLATE pg_catalog."default",
    description_courte character varying(200) COLLATE pg_catalog."default",
    auteur character varying(50) COLLATE pg_catalog."default",
    categorie character varying(50) COLLATE pg_catalog."default",
    type_contenu character varying(50) COLLATE pg_catalog."default",
    date_publication timestamp without time zone,
    CONSTRAINT contenus_inspirants_pkey PRIMARY KEY (id_contenus_inspirants)
);

CREATE TABLE IF NOT EXISTS public.contient
(
    id_questionnaire integer NOT NULL,
    id_questions integer NOT NULL,
    CONSTRAINT contient_pkey PRIMARY KEY (id_questionnaire, id_questions)
);

CREATE TABLE IF NOT EXISTS public.contient_publication
(
    id_communaute integer NOT NULL,
    id_publication_communaute integer NOT NULL,
    CONSTRAINT contient_publication_pkey PRIMARY KEY (id_communaute, id_publication_communaute)
);

CREATE TABLE IF NOT EXISTS public.contribue_consulte
(
    id_praticien integer NOT NULL,
    id_reference_scientifique integer NOT NULL,
    CONSTRAINT contribue_consulte_pkey PRIMARY KEY (id_praticien, id_reference_scientifique)
);

CREATE TABLE IF NOT EXISTS public.conversations
(
    id_communaute integer NOT NULL,
    id_conversations serial NOT NULL,
    contenu_message character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    est_lu boolean DEFAULT false,
    type_message character varying(50) COLLATE pg_catalog."default",
    url_fichier_jointe character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT conversations_pkey PRIMARY KEY (id_communaute, id_conversations)
);

CREATE TABLE IF NOT EXISTS public.enrichit
(
    id_analyse_ia_ integer NOT NULL,
    id_reference_scientifique integer NOT NULL,
    CONSTRAINT enrichit_pkey PRIMARY KEY (id_analyse_ia_, id_reference_scientifique)
);

CREATE TABLE IF NOT EXISTS public.enrichit_bdd
(
    numero_dossier integer NOT NULL,
    id_parcours_personnalises integer NOT NULL,
    id_resultat_parcours integer NOT NULL,
    id_reference_scientifique integer NOT NULL,
    CONSTRAINT enrichit_bdd_pkey PRIMARY KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours, id_reference_scientifique)
);

CREATE TABLE IF NOT EXISTS public.est_integree
(
    numero_dossier integer NOT NULL,
    id_parcours_personnalises integer NOT NULL,
    id_resultat_parcours integer NOT NULL,
    id_jumeau_numerique integer NOT NULL,
    id_recommendation integer NOT NULL,
    CONSTRAINT est_integree_pkey PRIMARY KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours, id_jumeau_numerique, id_recommendation)
);

CREATE TABLE IF NOT EXISTS public.est_membre
(
    id_utilisateur integer NOT NULL,
    id_communaute integer NOT NULL,
    CONSTRAINT est_membre_pkey PRIMARY KEY (id_utilisateur, id_communaute)
);

CREATE TABLE IF NOT EXISTS public.est_sujet_de
(
    id_questions integer NOT NULL,
    id_reponses integer NOT NULL,
    id_analyse_ia_ integer NOT NULL,
    CONSTRAINT est_sujet_de_pkey PRIMARY KEY (id_questions, id_reponses, id_analyse_ia_)
);

CREATE TABLE IF NOT EXISTS public.factures
(
    id_factures serial NOT NULL,
    date_facture timestamp without time zone NOT NULL,
    montant_total numeric(10, 2) NOT NULL,
    url_pdf character varying(255) COLLATE pg_catalog."default",
    numero_dossier character varying(50) COLLATE pg_catalog."default",
    id_praticien integer NOT NULL,
    numero_dossier_1 integer NOT NULL,
    id_paiement integer,
    CONSTRAINT factures_pkey PRIMARY KEY (id_factures)
);

CREATE TABLE IF NOT EXISTS public.historique_activite
(
    numero_dossier integer NOT NULL,
    id_historique_activite serial NOT NULL,
    date_heure_activite timestamp without time zone,
    type_activite character varying(50) COLLATE pg_catalog."default",
    source_activite character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT historique_activite_pkey PRIMARY KEY (numero_dossier, id_historique_activite)
);

CREATE TABLE IF NOT EXISTS public.jumeau_numerique
(
    id_jumeau_numerique serial NOT NULL,
    date_heure timestamp without time zone,
    donnees_energie_ character varying(255) COLLATE pg_catalog."default",
    resume_dynamique character varying(50) COLLATE pg_catalog."default",
    donnees_corporelles character varying(50) COLLATE pg_catalog."default",
    donnees_emotionnelles character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT jumeau_numerique_pkey PRIMARY KEY (id_jumeau_numerique)
);

CREATE TABLE IF NOT EXISTS public.message
(
    numero_dossier integer NOT NULL,
    id_praticien integer NOT NULL,
    id_message serial NOT NULL,
    sujet character varying(50) COLLATE pg_catalog."default",
    date_heure_envoie timestamp without time zone,
    lu boolean,
    type_message character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT message_pkey PRIMARY KEY (numero_dossier, id_praticien, id_message)
);

CREATE TABLE IF NOT EXISTS public.paiement
(
    id_praticien integer NOT NULL,
    id_praticien_1 integer NOT NULL,
    id_service integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_rendez_vous integer NOT NULL,
    id_paiement serial NOT NULL,
    montant double precision NOT NULL,
    mode_paiement character varying(50) COLLATE pg_catalog."default",
    date_paiement timestamp without time zone NOT NULL,
    statut_paiement character varying(50) COLLATE pg_catalog."default",
    reference_transaction character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT paiement_pkey PRIMARY KEY (id_praticien, id_praticien_1, id_service, numero_dossier, id_rendez_vous, id_paiement)
);

CREATE TABLE IF NOT EXISTS public.parcours_personnalises
(
    numero_dossier integer NOT NULL,
    id_parcours_personnalises serial NOT NULL,
    date_creation date,
    date_derniere_maj date,
    statut character varying(50) COLLATE pg_catalog."default",
    objectif_principal character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT parcours_personnalises_pkey PRIMARY KEY (numero_dossier, id_parcours_personnalises)
);

CREATE TABLE IF NOT EXISTS public.participe
(
    id_utilisateur integer NOT NULL,
    id_ateliers integer NOT NULL,
    CONSTRAINT participe_pkey PRIMARY KEY (id_utilisateur, id_ateliers)
);

CREATE TABLE IF NOT EXISTS public.participer
(
    id_utilisateur integer NOT NULL,
    id_communaute integer NOT NULL,
    id_conversations integer NOT NULL,
    CONSTRAINT participer_pkey PRIMARY KEY (id_utilisateur, id_communaute, id_conversations)
);

CREATE TABLE IF NOT EXISTS public.patient
(
    numero_dossier serial NOT NULL,
    adresse character varying(50) COLLATE pg_catalog."default",
    date_de_naissance timestamp without time zone NOT NULL,
    genre character varying(50) COLLATE pg_catalog."default" NOT NULL,
    date_inscription date NOT NULL,
    derniere_connexion timestamp without time zone NOT NULL,
    situation_pro_ character varying(100) COLLATE pg_catalog."default",
    origine_ethnique_ character varying(100) COLLATE pg_catalog."default",
    environnement_vie character varying(255) COLLATE pg_catalog."default",
    habitudes_ character varying(500) COLLATE pg_catalog."default",
    rythme_quotidien_ character varying(500) COLLATE pg_catalog."default",
    type_activite_physique_ character varying(500) COLLATE pg_catalog."default",
    frequence_activite_physique_ character varying(50) COLLATE pg_catalog."default",
    type_alimentation_ character varying(500) COLLATE pg_catalog."default",
    consommation_substances_ character varying(500) COLLATE pg_catalog."default",
    niveau_energie_moyen integer,
    gestion_emotionnelle_actuelle_ character varying(500) COLLATE pg_catalog."default",
    _interet_spiritualite character varying(50) COLLATE pg_catalog."default",
    suivi_progres_actuel character varying(50) COLLATE pg_catalog."default",
    type_accompagnement_souhaite_ character varying(50) COLLATE pg_catalog."default",
    autorisation_mise_en_lien_therapeutes boolean,
    frequence_rappels_souhaitee character varying(50) COLLATE pg_catalog."default",
    nom_jumeau_numerique_ character varying(100) COLLATE pg_catalog."default",
    design_jumeau_numerique character varying(100) COLLATE pg_catalog."default",
    qualite_environnement_vie_choix_ character varying(100) COLLATE pg_catalog."default",
    id_utilisateur integer NOT NULL,
    CONSTRAINT patient_pkey PRIMARY KEY (numero_dossier),
    CONSTRAINT patient_id_utilisateur_key UNIQUE (id_utilisateur)
);

CREATE TABLE IF NOT EXISTS public.patient_recoit
(
    numero_dossier integer NOT NULL,
    numero_dossier_1 integer NOT NULL,
    id_praticien integer NOT NULL,
    id_message integer NOT NULL,
    CONSTRAINT patient_recoit_pkey PRIMARY KEY (numero_dossier, numero_dossier_1, id_praticien, id_message)
);

CREATE TABLE IF NOT EXISTS public.patient_repond_a
(
    numero_dossier integer NOT NULL,
    id_questionnaire integer NOT NULL,
    est_repondu character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT patient_repond_a_pkey PRIMARY KEY (numero_dossier, id_questionnaire)
);

CREATE TABLE IF NOT EXISTS public.patient_repond_a_
(
    numero_dossier integer NOT NULL,
    id_questions integer NOT NULL,
    id_reponses integer NOT NULL,
    CONSTRAINT patient_repond_a__pkey PRIMARY KEY (numero_dossier, id_questions, id_reponses)
);

CREATE TABLE IF NOT EXISTS public.poste
(
    id_utilisateur integer NOT NULL,
    id_publication_communaute integer NOT NULL,
    CONSTRAINT poste_pkey PRIMARY KEY (id_utilisateur, id_publication_communaute)
);

CREATE TABLE IF NOT EXISTS public.praticien
(
    id_praticien serial NOT NULL,
    mode_consultation character varying(50) COLLATE pg_catalog."default",
    adresse_cabinet character varying(50) COLLATE pg_catalog."default",
    diplomes character varying(50) COLLATE pg_catalog."default",
    nombre_heures_pratique bigint NOT NULL,
    description character varying(200) COLLATE pg_catalog."default",
    annees_experience integer,
    tarifs_consultation double precision,
    photo_profil_url character varying(50) COLLATE pg_catalog."default",
    taux_satisfaction numeric(4, 2),
    statut_validation character varying(50) COLLATE pg_catalog."default",
    id_utilisateur integer NOT NULL,
    CONSTRAINT praticien_pkey PRIMARY KEY (id_praticien),
    CONSTRAINT praticien_id_utilisateur_key UNIQUE (id_utilisateur)
);

CREATE TABLE IF NOT EXISTS public.praticien_consulte
(
    id_praticien integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_bilan_suivi_patient integer NOT NULL,
    CONSTRAINT praticien_consulte_pkey PRIMARY KEY (id_praticien, numero_dossier, id_bilan_suivi_patient)
);

CREATE TABLE IF NOT EXISTS public.praticien_recoit
(
    id_praticien integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_praticien_1 integer NOT NULL,
    id_message integer NOT NULL,
    CONSTRAINT praticien_recoit_pkey PRIMARY KEY (id_praticien, numero_dossier, id_praticien_1, id_message)
);

CREATE TABLE IF NOT EXISTS public.praticien_repond_a
(
    id_questionnaire integer NOT NULL,
    id_praticien integer NOT NULL,
    CONSTRAINT praticien_repond_a_pkey PRIMARY KEY (id_questionnaire, id_praticien)
);

CREATE TABLE IF NOT EXISTS public.produits_bien_etre
(
    id_produits_bien_etre serial NOT NULL,
    prix double precision,
    nom_produit character varying(50) COLLATE pg_catalog."default",
    description character varying(300) COLLATE pg_catalog."default",
    stock bigint,
    url_image character varying(50) COLLATE pg_catalog."default",
    categorie character varying(50) COLLATE pg_catalog."default",
    id_praticien integer NOT NULL,
    CONSTRAINT produits_bien_etre_pkey PRIMARY KEY (id_produits_bien_etre)
);

CREATE TABLE IF NOT EXISTS public.publication_communaute
(
    id_publication_communaute serial NOT NULL,
    contenu_texte character varying(1000) COLLATE pg_catalog."default",
    url_piece_jointe character varying(50) COLLATE pg_catalog."default",
    type_publication character varying(50) COLLATE pg_catalog."default",
    est_epingle character varying(50) COLLATE pg_catalog."default",
    date_publication timestamp without time zone,
    CONSTRAINT publication_communaute_pkey PRIMARY KEY (id_publication_communaute)
);

CREATE TABLE IF NOT EXISTS public.publie
(
    id_praticien integer NOT NULL,
    id_contenus_inspirants integer NOT NULL,
    CONSTRAINT publie_pkey PRIMARY KEY (id_praticien, id_contenus_inspirants)
);

CREATE TABLE IF NOT EXISTS public.questionnaire
(
    id_questionnaire serial NOT NULL,
    description character varying(200) COLLATE pg_catalog."default",
    type_cible character varying(50) COLLATE pg_catalog."default",
    nom_questionnaire_ character varying(100) COLLATE pg_catalog."default",
    date_creation date,
    date_derniere_maj timestamp without time zone,
    CONSTRAINT questionnaire_pkey PRIMARY KEY (id_questionnaire)
);

CREATE TABLE IF NOT EXISTS public.questions
(
    id_questions serial NOT NULL,
    texte_question character varying(200) COLLATE pg_catalog."default",
    "type_réponses" character varying(50) COLLATE pg_catalog."default",
    categorie_question_ character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT questions_pkey PRIMARY KEY (id_questions)
);

CREATE TABLE IF NOT EXISTS public.recoit
(
    numero_dossier integer NOT NULL,
    id_jumeau_numerique integer NOT NULL,
    id_recommendation integer NOT NULL,
    CONSTRAINT recoit_pkey PRIMARY KEY (numero_dossier, id_jumeau_numerique, id_recommendation)
);

CREATE TABLE IF NOT EXISTS public.recommande
(
    id_analyse_ia_ integer NOT NULL,
    id_jumeau_numerique integer NOT NULL,
    id_recommendation integer NOT NULL,
    CONSTRAINT recommande_pkey PRIMARY KEY (id_analyse_ia_, id_jumeau_numerique, id_recommendation)
);

CREATE TABLE IF NOT EXISTS public.recommendation
(
    id_jumeau_numerique integer NOT NULL,
    id_recommendation serial NOT NULL,
    type_recommandation character varying(300) COLLATE pg_catalog."default",
    impact_prevu_jumeau character varying(500) COLLATE pg_catalog."default",
    statut_recommandation character varying(50) COLLATE pg_catalog."default",
    date_emission date,
    texte_recommandation character varying(2000) COLLATE pg_catalog."default",
    CONSTRAINT recommendation_pkey PRIMARY KEY (id_jumeau_numerique, id_recommendation)
);

CREATE TABLE IF NOT EXISTS public.referentiel_scientififque
(
    id_reference_scientifique serial NOT NULL,
    titre character varying(50) COLLATE pg_catalog."default",
    description_courte character varying(200) COLLATE pg_catalog."default",
    type_element character varying(50) COLLATE pg_catalog."default",
    contenu_detaille character varying(50) COLLATE pg_catalog."default",
    auteur_source character varying(50) COLLATE pg_catalog."default",
    date_publication_initiale date,
    date_derniere_mise_a_jour date,
    mots_cles character varying(600) COLLATE pg_catalog."default",
    est_valide_par_expert boolean,
    url_lien character varying(255) COLLATE pg_catalog."default",
    thematique character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT referentiel_scientififque_pkey PRIMARY KEY (id_reference_scientifique)
);

CREATE TABLE IF NOT EXISTS public.rendez_vous
(
    id_praticien integer NOT NULL,
    id_praticien_1 integer NOT NULL,
    id_service integer NOT NULL,
    numero_dossier integer NOT NULL,
    id_rendez_vous serial NOT NULL,
    date_heure_debut timestamp without time zone,
    date_heure_fin timestamp without time zone,
    statut_rdv character varying(50) COLLATE pg_catalog."default",
    mode_paiement_ character varying(50) COLLATE pg_catalog."default",
    recommandations_post_seance_ character varying(50) COLLATE pg_catalog."default",
    mode_rdv character varying(50) COLLATE pg_catalog."default",
    lien_visio character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT rendez_vous_pkey PRIMARY KEY (id_praticien, id_praticien_1, id_service, numero_dossier, id_rendez_vous)
);

CREATE TABLE IF NOT EXISTS public.reponses
(
    id_questions integer NOT NULL,
    id_reponses serial NOT NULL,
    contenu_reponse character varying(200) COLLATE pg_catalog."default",
    date_reponse timestamp without time zone,
    CONSTRAINT reponses_pkey PRIMARY KEY (id_questions, id_reponses)
);

CREATE TABLE IF NOT EXISTS public.resultat_parcours
(
    numero_dossier integer NOT NULL,
    id_parcours_personnalises integer NOT NULL,
    id_resultat_parcours serial NOT NULL,
    date_cible date,
    description character varying(200) COLLATE pg_catalog."default",
    statut_etape character varying(50) COLLATE pg_catalog."default",
    type_etape character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT resultat_parcours_pkey PRIMARY KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours)
);

CREATE TABLE IF NOT EXISTS public.service
(
    id_praticien integer NOT NULL,
    id_service serial NOT NULL,
    description_service character varying(500) COLLATE pg_catalog."default",
    nom_service character varying(50) COLLATE pg_catalog."default",
    tarif character varying(50) COLLATE pg_catalog."default",
    type_service character varying(50) COLLATE pg_catalog."default",
    duree time without time zone,
    CONSTRAINT service_pkey PRIMARY KEY (id_praticien, id_service)
);

CREATE TABLE IF NOT EXISTS public.specialites
(
    id_specialites serial NOT NULL,
    nom_speciallite character varying(50) COLLATE pg_catalog."default",
    description character varying(300) COLLATE pg_catalog."default",
    CONSTRAINT specialites_pkey PRIMARY KEY (id_specialites)
);

CREATE TABLE IF NOT EXISTS public.utilisateur
(
    id_utilisateur serial NOT NULL,
    mail character varying(255) COLLATE pg_catalog."default" NOT NULL,
    nom character varying(50) COLLATE pg_catalog."default",
    prenom character varying(50) COLLATE pg_catalog."default",
    date_inscription date,
    derniere_connexion timestamp without time zone,
    role_utilisateur character varying(50) COLLATE pg_catalog."default" NOT NULL,
    statut_compte character varying(50) COLLATE pg_catalog."default",
    mot_de_passe character varying(255) COLLATE pg_catalog."default" NOT NULL,
    consentement_cgu boolean NOT NULL,
    consentement_partage_donnees_sante_ boolean NOT NULL,
    preferences_notifications character varying(50) COLLATE pg_catalog."default",
    telephone_ bigint,
    CONSTRAINT utilisateur_pkey PRIMARY KEY (id_utilisateur),
    CONSTRAINT utilisateur_mail_key UNIQUE (mail)
);

ALTER TABLE IF EXISTS public.a_des_etats
    ADD CONSTRAINT a_des_etats_id_jumeau_numerique_fkey FOREIGN KEY (id_jumeau_numerique)
    REFERENCES public.jumeau_numerique (id_jumeau_numerique) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.a_des_etats
    ADD CONSTRAINT a_des_etats_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."a_la_spécialite"
    ADD CONSTRAINT "a_la_spécialite_id_specialites_fkey" FOREIGN KEY (id_specialites)
    REFERENCES public.specialites (id_specialites) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.achete
    ADD CONSTRAINT achete_id_produits_bien_etre_fkey FOREIGN KEY (id_produits_bien_etre)
    REFERENCES public.produits_bien_etre (id_produits_bien_etre) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.achete
    ADD CONSTRAINT achete_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.alimente
    ADD CONSTRAINT alimente_id_analyse_ia__fkey FOREIGN KEY (id_analyse_ia_)
    REFERENCES public.analyse_ia_ (id_analyse_ia_) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.alimente
    ADD CONSTRAINT alimente_numero_dossier_id_parcours_personnalises_id_resul_fkey FOREIGN KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours)
    REFERENCES public.resultat_parcours (numero_dossier, id_parcours_personnalises, id_resultat_parcours) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.animer
    ADD CONSTRAINT animer_id_conferences_fkey FOREIGN KEY (id_conferences)
    REFERENCES public.conferences (id_conferences) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.avis
    ADD CONSTRAINT avis_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.bilan_suivi_patient
    ADD CONSTRAINT bilan_suivi_patient_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.consulte
    ADD CONSTRAINT consulte_id_contenus_inspirants_fkey FOREIGN KEY (id_contenus_inspirants)
    REFERENCES public.contenus_inspirants (id_contenus_inspirants) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.consulte
    ADD CONSTRAINT consulte_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.consulte_intervient
    ADD CONSTRAINT consulte_intervient_numero_dossier_id_parcours_personnalis_fkey FOREIGN KEY (numero_dossier, id_parcours_personnalises)
    REFERENCES public.parcours_personnalises (numero_dossier, id_parcours_personnalises) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contient
    ADD CONSTRAINT contient_id_questionnaire_fkey FOREIGN KEY (id_questionnaire)
    REFERENCES public.questionnaire (id_questionnaire) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contient
    ADD CONSTRAINT contient_id_questions_fkey FOREIGN KEY (id_questions)
    REFERENCES public.questions (id_questions) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contient_publication
    ADD CONSTRAINT contient_publication_id_communaute_fkey FOREIGN KEY (id_communaute)
    REFERENCES public.communaute (id_communaute) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contient_publication
    ADD CONSTRAINT contient_publication_id_publication_communaute_fkey FOREIGN KEY (id_publication_communaute)
    REFERENCES public.publication_communaute (id_publication_communaute) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contribue_consulte
    ADD CONSTRAINT contribue_consulte_id_reference_scientifique_fkey FOREIGN KEY (id_reference_scientifique)
    REFERENCES public.referentiel_scientififque (id_reference_scientifique) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.conversations
    ADD CONSTRAINT conversations_id_communaute_fkey FOREIGN KEY (id_communaute)
    REFERENCES public.communaute (id_communaute) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrichit
    ADD CONSTRAINT enrichit_id_analyse_ia__fkey FOREIGN KEY (id_analyse_ia_)
    REFERENCES public.analyse_ia_ (id_analyse_ia_) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrichit
    ADD CONSTRAINT enrichit_id_reference_scientifique_fkey FOREIGN KEY (id_reference_scientifique)
    REFERENCES public.referentiel_scientififque (id_reference_scientifique) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrichit_bdd
    ADD CONSTRAINT enrichit_bdd_id_reference_scientifique_fkey FOREIGN KEY (id_reference_scientifique)
    REFERENCES public.referentiel_scientififque (id_reference_scientifique) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrichit_bdd
    ADD CONSTRAINT enrichit_bdd_numero_dossier_id_parcours_personnalises_id_r_fkey FOREIGN KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours)
    REFERENCES public.resultat_parcours (numero_dossier, id_parcours_personnalises, id_resultat_parcours) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_integree
    ADD CONSTRAINT est_integree_id_jumeau_numerique_id_recommendation_fkey FOREIGN KEY (id_jumeau_numerique, id_recommendation)
    REFERENCES public.recommendation (id_jumeau_numerique, id_recommendation) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_integree
    ADD CONSTRAINT est_integree_numero_dossier_id_parcours_personnalises_id_r_fkey FOREIGN KEY (numero_dossier, id_parcours_personnalises, id_resultat_parcours)
    REFERENCES public.resultat_parcours (numero_dossier, id_parcours_personnalises, id_resultat_parcours) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_membre
    ADD CONSTRAINT est_membre_id_communaute_fkey FOREIGN KEY (id_communaute)
    REFERENCES public.communaute (id_communaute) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_membre
    ADD CONSTRAINT est_membre_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_sujet_de
    ADD CONSTRAINT est_sujet_de_id_analyse_ia__fkey FOREIGN KEY (id_analyse_ia_)
    REFERENCES public.analyse_ia_ (id_analyse_ia_) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.est_sujet_de
    ADD CONSTRAINT est_sujet_de_id_questions_id_reponses_fkey FOREIGN KEY (id_questions, id_reponses)
    REFERENCES public.reponses (id_questions, id_reponses) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.factures
    ADD CONSTRAINT factures_numero_dossier_1_fkey FOREIGN KEY (numero_dossier_1)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.historique_activite
    ADD CONSTRAINT historique_activite_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.message
    ADD CONSTRAINT message_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.paiement
    ADD CONSTRAINT paiement_id_praticien_id_praticien_1_id_service_numero_dos_fkey FOREIGN KEY (id_praticien, id_praticien_1, id_service, numero_dossier, id_rendez_vous)
    REFERENCES public.rendez_vous (id_praticien, id_praticien_1, id_service, numero_dossier, id_rendez_vous) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.parcours_personnalises
    ADD CONSTRAINT parcours_personnalises_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.participe
    ADD CONSTRAINT participe_id_ateliers_fkey FOREIGN KEY (id_ateliers)
    REFERENCES public.ateliers (id_ateliers) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.participe
    ADD CONSTRAINT participe_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.participer
    ADD CONSTRAINT participer_id_communaute_id_conversations_fkey FOREIGN KEY (id_communaute, id_conversations)
    REFERENCES public.conversations (id_communaute, id_conversations) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.participer
    ADD CONSTRAINT participer_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT patient_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS patient_id_utilisateur_key
    ON public.patient(id_utilisateur);


ALTER TABLE IF EXISTS public.patient_recoit
    ADD CONSTRAINT patient_recoit_numero_dossier_1_id_praticien_id_message_fkey FOREIGN KEY (numero_dossier_1, id_praticien, id_message)
    REFERENCES public.message (numero_dossier, id_praticien, id_message) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_recoit
    ADD CONSTRAINT patient_recoit_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_repond_a
    ADD CONSTRAINT patient_repond_a_id_questionnaire_fkey FOREIGN KEY (id_questionnaire)
    REFERENCES public.questionnaire (id_questionnaire) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_repond_a
    ADD CONSTRAINT patient_repond_a_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_repond_a_
    ADD CONSTRAINT patient_repond_a__id_questions_id_reponses_fkey FOREIGN KEY (id_questions, id_reponses)
    REFERENCES public.reponses (id_questions, id_reponses) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_repond_a_
    ADD CONSTRAINT patient_repond_a__numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.poste
    ADD CONSTRAINT poste_id_publication_communaute_fkey FOREIGN KEY (id_publication_communaute)
    REFERENCES public.publication_communaute (id_publication_communaute) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.poste
    ADD CONSTRAINT poste_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.praticien
    ADD CONSTRAINT praticien_id_utilisateur_fkey FOREIGN KEY (id_utilisateur)
    REFERENCES public.utilisateur (id_utilisateur) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS praticien_id_utilisateur_key
    ON public.praticien(id_utilisateur);


ALTER TABLE IF EXISTS public.praticien_consulte
    ADD CONSTRAINT praticien_consulte_numero_dossier_id_bilan_suivi_patient_fkey FOREIGN KEY (numero_dossier, id_bilan_suivi_patient)
    REFERENCES public.bilan_suivi_patient (numero_dossier, id_bilan_suivi_patient) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.praticien_recoit
    ADD CONSTRAINT praticien_recoit_numero_dossier_id_praticien_1_id_message_fkey FOREIGN KEY (numero_dossier, id_praticien_1, id_message)
    REFERENCES public.message (numero_dossier, id_praticien, id_message) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.praticien_repond_a
    ADD CONSTRAINT praticien_repond_a_id_questionnaire_fkey FOREIGN KEY (id_questionnaire)
    REFERENCES public.questionnaire (id_questionnaire) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.publie
    ADD CONSTRAINT publie_id_contenus_inspirants_fkey FOREIGN KEY (id_contenus_inspirants)
    REFERENCES public.contenus_inspirants (id_contenus_inspirants) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recoit
    ADD CONSTRAINT recoit_id_jumeau_numerique_id_recommendation_fkey FOREIGN KEY (id_jumeau_numerique, id_recommendation)
    REFERENCES public.recommendation (id_jumeau_numerique, id_recommendation) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recoit
    ADD CONSTRAINT recoit_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recommande
    ADD CONSTRAINT recommande_id_analyse_ia__fkey FOREIGN KEY (id_analyse_ia_)
    REFERENCES public.analyse_ia_ (id_analyse_ia_) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recommande
    ADD CONSTRAINT recommande_id_jumeau_numerique_id_recommendation_fkey FOREIGN KEY (id_jumeau_numerique, id_recommendation)
    REFERENCES public.recommendation (id_jumeau_numerique, id_recommendation) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recommendation
    ADD CONSTRAINT recommendation_id_jumeau_numerique_fkey FOREIGN KEY (id_jumeau_numerique)
    REFERENCES public.jumeau_numerique (id_jumeau_numerique) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rendez_vous
    ADD CONSTRAINT rendez_vous_id_praticien_1_id_service_fkey FOREIGN KEY (id_praticien_1, id_service)
    REFERENCES public.service (id_praticien, id_service) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rendez_vous
    ADD CONSTRAINT rendez_vous_numero_dossier_fkey FOREIGN KEY (numero_dossier)
    REFERENCES public.patient (numero_dossier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reponses
    ADD CONSTRAINT reponses_id_questions_fkey FOREIGN KEY (id_questions)
    REFERENCES public.questions (id_questions) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resultat_parcours
    ADD CONSTRAINT resultat_parcours_numero_dossier_id_parcours_personnalises_fkey FOREIGN KEY (numero_dossier, id_parcours_personnalises)
    REFERENCES public.parcours_personnalises (numero_dossier, id_parcours_personnalises) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;